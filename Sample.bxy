/*
    Sam.ple.ase!
*/

/*
    Something handy to refer to when lining groups of things up! 
    (like a guide line / ruler in PSD editing)
*/
@guide foo {
    left: 0;
    right: (@window).width;
}

/* 
    For whatever reason we want our right guide to change when the window has
    resized past 640px 
*/

@media( (@window).width > 640):(@window).resize {
     
    @guide foo {
        left: 0;
        right: (@window).width;
    }

}

/* I want my #nav element to sit all the way across */
#nav {
    height: 50;
    left: (@guide).foo.left;
    right: (@guide).foo.right;
}

/* 
    I want 3 links across the screen.   
    I want the left most one to start at my 'foo' guide's left
    I want the right most one to start at my 'foo' guide's right (right?!)
    And I want them in the middle of a box as tall as the one I'm sitting in.
    
    (And I want to just use some cheap fast math to do it and don't care about
    rows or adding new elements that will break the design regardless)
*/

#nav a {
    across: 3;
    left-side: (@guide).foo.left;
    right-side: (@guide).foo.right;
    middle: (#nav).height;
}

#sample div {
    down: 3;
    left: (@guide).foo.right;
    top-side: (@guide).foo.left;
    bottom-side: (@guide).foo.right;
}


/***
Note! Boxysheets doesn't support element names as the root selector in a CSS query
e.g.

div {
    top: 20;
}

You can do any number of things, as long as you're writing one of @, . or # 

Good:
#footerFastID div {
    top: 20;
}

.slowQuery div {
    top: 20;
}

Bad:
h1.copyText div {
    
}







*/
